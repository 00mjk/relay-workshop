diff --git a/node_modules/webpack/lib/NormalModuleFactory.js b/node_modules/webpack/lib/NormalModuleFactory.js
index e2fffae..828c8ce 100644
--- a/node_modules/webpack/lib/NormalModuleFactory.js
+++ b/node_modules/webpack/lib/NormalModuleFactory.js
@@ -123,10 +123,13 @@ const needCalls = (times, callback) => {
 };
 
 // TODO webpack 6 remove
-const deprecationChangedHookMessage = name =>
-	`NormalModuleFactory.${name} is no longer a waterfall hook, but a bailing hook instead. ` +
-	"Do not return the passed object, but modify it instead. " +
-	"Returning false will ignore the request and results in no module created.";
+const deprecationChangedHookMessage = (name, hook) => {
+	const names = hook.taps.map(tapped => tapped.name).join(',');
+
+	return `NormalModuleFactory.${name} (${names}) is no longer a waterfall hook, but a bailing hook instead. ` +
+		"Do not return the passed object, but modify it instead. " +
+		"Returning false will ignore the request and results in no module created.";
+};
 
 const dependencyCache = new WeakMap();
 
@@ -240,7 +243,7 @@ class NormalModuleFactory extends ModuleFactory {
 
 					if (typeof result === "object")
 						throw new Error(
-							deprecationChangedHookMessage("resolve") +
+							deprecationChangedHookMessage("resolve", this.hooks.resolve) +
 								" Returning a Module object will result in this module used as result."
 						);
 
@@ -248,7 +251,7 @@ class NormalModuleFactory extends ModuleFactory {
 						if (err) return callback(err);
 
 						if (typeof result === "object")
-							throw new Error(deprecationChangedHookMessage("afterResolve"));
+							throw new Error(deprecationChangedHookMessage("afterResolve", this.hooks.afterResolve));
 
 						// Ignored
 						if (result === false) return callback();
@@ -641,7 +644,7 @@ class NormalModuleFactory extends ModuleFactory {
 			}
 
 			if (typeof result === "object")
-				throw new Error(deprecationChangedHookMessage("beforeResolve"));
+				throw new Error(deprecationChangedHookMessage("beforeResolve", this.hooks.beforeResolve));
 
 			this.hooks.factorize.callAsync(resolveData, (err, module) => {
 				if (err) {
